#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpensesCalculator
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Transactions")]
	public partial class TransactionsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccount_Type(Account_Type instance);
    partial void UpdateAccount_Type(Account_Type instance);
    partial void DeleteAccount_Type(Account_Type instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertTransaction_Type(Transaction_Type instance);
    partial void UpdateTransaction_Type(Transaction_Type instance);
    partial void DeleteTransaction_Type(Transaction_Type instance);
    partial void InsertSource(Source instance);
    partial void UpdateSource(Source instance);
    partial void DeleteSource(Source instance);
    #endregion
		
		public TransactionsDataContext() : 
				base(global::ExpensesCalculator.Properties.Settings.Default.TransactionsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Account_Type> Account_Types
		{
			get
			{
				return this.GetTable<Account_Type>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Transaction_Type> Transaction_Types
		{
			get
			{
				return this.GetTable<Transaction_Type>();
			}
		}
		
		public System.Data.Linq.Table<TypeCategory> TypeCategories
		{
			get
			{
				return this.GetTable<TypeCategory>();
			}
		}
		
		public System.Data.Linq.Table<Source> Sources
		{
			get
			{
				return this.GetTable<Source>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.Transactions")]
	public partial class Transaction
	{
		
		private System.DateTime _DATE;
		
		private string _ACCOUNT;
		
		private decimal _AMOUNT;
		
		private string _COMMENT;
		
		private System.Nullable<int> _ID_TRX_TYPE;
		
		private string _NAME;
		
		public Transaction()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime DATE
		{
			get
			{
				return this._DATE;
			}
			set
			{
				if ((this._DATE != value))
				{
					this._DATE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNT", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ACCOUNT
		{
			get
			{
				return this._ACCOUNT;
			}
			set
			{
				if ((this._ACCOUNT != value))
				{
					this._ACCOUNT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMOUNT", DbType="Money NOT NULL")]
		public decimal AMOUNT
		{
			get
			{
				return this._AMOUNT;
			}
			set
			{
				if ((this._AMOUNT != value))
				{
					this._AMOUNT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMENT", DbType="VarChar(255)")]
		public string COMMENT
		{
			get
			{
				return this._COMMENT;
			}
			set
			{
				if ((this._COMMENT != value))
				{
					this._COMMENT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TRX_TYPE", DbType="Int")]
		public System.Nullable<int> ID_TRX_TYPE
		{
			get
			{
				return this._ID_TRX_TYPE;
			}
			set
			{
				if ((this._ID_TRX_TYPE != value))
				{
					this._ID_TRX_TYPE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this._NAME = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BANK;
		
		private string _ACCOUNT;
		
		private string _ACCOUNT_TYPE;
		
		private string _COMMENT;
		
		private EntityRef<Account_Type> _Account_Type1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBANKChanging(string value);
    partial void OnBANKChanged();
    partial void OnACCOUNTChanging(string value);
    partial void OnACCOUNTChanged();
    partial void OnACCOUNT_TYPEChanging(string value);
    partial void OnACCOUNT_TYPEChanged();
    partial void OnCOMMENTChanging(string value);
    partial void OnCOMMENTChanged();
    #endregion
		
		public Account()
		{
			this._Account_Type1 = default(EntityRef<Account_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BANK", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string BANK
		{
			get
			{
				return this._BANK;
			}
			set
			{
				if ((this._BANK != value))
				{
					this.OnBANKChanging(value);
					this.SendPropertyChanging();
					this._BANK = value;
					this.SendPropertyChanged("BANK");
					this.OnBANKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNT", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACCOUNT
		{
			get
			{
				return this._ACCOUNT;
			}
			set
			{
				if ((this._ACCOUNT != value))
				{
					this.OnACCOUNTChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNT = value;
					this.SendPropertyChanged("ACCOUNT");
					this.OnACCOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNT_TYPE", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ACCOUNT_TYPE
		{
			get
			{
				return this._ACCOUNT_TYPE;
			}
			set
			{
				if ((this._ACCOUNT_TYPE != value))
				{
					if (this._Account_Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCOUNT_TYPEChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNT_TYPE = value;
					this.SendPropertyChanged("ACCOUNT_TYPE");
					this.OnACCOUNT_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMENT", DbType="VarChar(255)")]
		public string COMMENT
		{
			get
			{
				return this._COMMENT;
			}
			set
			{
				if ((this._COMMENT != value))
				{
					this.OnCOMMENTChanging(value);
					this.SendPropertyChanging();
					this._COMMENT = value;
					this.SendPropertyChanged("COMMENT");
					this.OnCOMMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Type_Account", Storage="_Account_Type1", ThisKey="ACCOUNT_TYPE", OtherKey="ACCOUNT_TYPE", IsForeignKey=true)]
		public Account_Type Account_Type1
		{
			get
			{
				return this._Account_Type1.Entity;
			}
			set
			{
				Account_Type previousValue = this._Account_Type1.Entity;
				if (((previousValue != value) 
							|| (this._Account_Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account_Type1.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Account_Type1.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._ACCOUNT_TYPE = value.ACCOUNT_TYPE;
					}
					else
					{
						this._ACCOUNT_TYPE = default(string);
					}
					this.SendPropertyChanged("Account_Type1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.Account_Types")]
	public partial class Account_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACCOUNT_TYPE;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACCOUNT_TYPEChanging(string value);
    partial void OnACCOUNT_TYPEChanged();
    #endregion
		
		public Account_Type()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCOUNT_TYPE", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACCOUNT_TYPE
		{
			get
			{
				return this._ACCOUNT_TYPE;
			}
			set
			{
				if ((this._ACCOUNT_TYPE != value))
				{
					this.OnACCOUNT_TYPEChanging(value);
					this.SendPropertyChanging();
					this._ACCOUNT_TYPE = value;
					this.SendPropertyChanged("ACCOUNT_TYPE");
					this.OnACCOUNT_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Type_Account", Storage="_Accounts", ThisKey="ACCOUNT_TYPE", OtherKey="ACCOUNT_TYPE")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Account_Type1 = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Account_Type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CATEGORY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCATEGORYChanging(string value);
    partial void OnCATEGORYChanged();
    #endregion
		
		public Category()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CATEGORY
		{
			get
			{
				return this._CATEGORY;
			}
			set
			{
				if ((this._CATEGORY != value))
				{
					this.OnCATEGORYChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY = value;
					this.SendPropertyChanged("CATEGORY");
					this.OnCATEGORYChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.Transaction_Type")]
	public partial class Transaction_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_TRX_TYPE;
		
		private string _COMMENT;
		
		private EntitySet<Source> _Sources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TRX_TYPEChanging(int value);
    partial void OnID_TRX_TYPEChanged();
    partial void OnCOMMENTChanging(string value);
    partial void OnCOMMENTChanged();
    #endregion
		
		public Transaction_Type()
		{
			this._Sources = new EntitySet<Source>(new Action<Source>(this.attach_Sources), new Action<Source>(this.detach_Sources));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TRX_TYPE", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_TRX_TYPE
		{
			get
			{
				return this._ID_TRX_TYPE;
			}
			set
			{
				if ((this._ID_TRX_TYPE != value))
				{
					this.OnID_TRX_TYPEChanging(value);
					this.SendPropertyChanging();
					this._ID_TRX_TYPE = value;
					this.SendPropertyChanged("ID_TRX_TYPE");
					this.OnID_TRX_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMENT", DbType="VarChar(255)")]
		public string COMMENT
		{
			get
			{
				return this._COMMENT;
			}
			set
			{
				if ((this._COMMENT != value))
				{
					this.OnCOMMENTChanging(value);
					this.SendPropertyChanging();
					this._COMMENT = value;
					this.SendPropertyChanged("COMMENT");
					this.OnCOMMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_Type_Source", Storage="_Sources", ThisKey="ID_TRX_TYPE", OtherKey="ID_TRX_TYPE")]
		public EntitySet<Source> Sources
		{
			get
			{
				return this._Sources;
			}
			set
			{
				this._Sources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sources(Source entity)
		{
			this.SendPropertyChanging();
			entity.Transaction_Type = this;
		}
		
		private void detach_Sources(Source entity)
		{
			this.SendPropertyChanging();
			entity.Transaction_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.TypeCategories")]
	public partial class TypeCategory
	{
		
		private System.Nullable<int> _ID_TRX_TYPE;
		
		private string _CATEGORY;
		
		private decimal _PERCENTAGE;
		
		public TypeCategory()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TRX_TYPE", DbType="Int")]
		public System.Nullable<int> ID_TRX_TYPE
		{
			get
			{
				return this._ID_TRX_TYPE;
			}
			set
			{
				if ((this._ID_TRX_TYPE != value))
				{
					this._ID_TRX_TYPE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY", DbType="VarChar(255)")]
		public string CATEGORY
		{
			get
			{
				return this._CATEGORY;
			}
			set
			{
				if ((this._CATEGORY != value))
				{
					this._CATEGORY = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERCENTAGE", DbType="Decimal(5,2) NOT NULL")]
		public decimal PERCENTAGE
		{
			get
			{
				return this._PERCENTAGE;
			}
			set
			{
				if ((this._PERCENTAGE != value))
				{
					this._PERCENTAGE = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="trx.Source")]
	public partial class Source : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NAME;
		
		private System.Nullable<int> _ID_TRX_TYPE;
		
		private EntityRef<Transaction_Type> _Transaction_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnID_TRX_TYPEChanging(System.Nullable<int> value);
    partial void OnID_TRX_TYPEChanged();
    #endregion
		
		public Source()
		{
			this._Transaction_Type = default(EntityRef<Transaction_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TRX_TYPE", DbType="Int")]
		public System.Nullable<int> ID_TRX_TYPE
		{
			get
			{
				return this._ID_TRX_TYPE;
			}
			set
			{
				if ((this._ID_TRX_TYPE != value))
				{
					if (this._Transaction_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TRX_TYPEChanging(value);
					this.SendPropertyChanging();
					this._ID_TRX_TYPE = value;
					this.SendPropertyChanged("ID_TRX_TYPE");
					this.OnID_TRX_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_Type_Source", Storage="_Transaction_Type", ThisKey="ID_TRX_TYPE", OtherKey="ID_TRX_TYPE", IsForeignKey=true)]
		public Transaction_Type Transaction_Type
		{
			get
			{
				return this._Transaction_Type.Entity;
			}
			set
			{
				Transaction_Type previousValue = this._Transaction_Type.Entity;
				if (((previousValue != value) 
							|| (this._Transaction_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction_Type.Entity = null;
						previousValue.Sources.Remove(this);
					}
					this._Transaction_Type.Entity = value;
					if ((value != null))
					{
						value.Sources.Add(this);
						this._ID_TRX_TYPE = value.ID_TRX_TYPE;
					}
					else
					{
						this._ID_TRX_TYPE = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transaction_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
